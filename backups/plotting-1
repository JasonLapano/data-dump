# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib import cm
import glob
from scipy.interpolate import interp1d
from scipy.misc import derivative
from scipy.interpolate import InterpolatedUnivariateSpline


#%%
#Select all folders to look under for glob.glob.  Put desired variablename after.  Should be nx2 list
directories = np.array([[r'C:\Users\5ul\Google Drive\MnTe\PPMS\20210422_1', 's0'],
               [r'C:\Users\5ul\Google Drive\MnTe\PPMS\20210427_1\_1_1e14_He', 's1'], 
               [r'C:\Users\5ul\Google Drive\MnTe\PPMS\20210427_1\_1_6e14_He', 's5']])

 #%%
#Grab all filenames for RvsH
filenamesRvsH = {}
filenamesRvsT = {}
plt.close('all')
#put all filenames of scans here.  Filepath in 1st column, name in second as .xy file, 3rd as name for plotting.  filename should start with \\
for i in range(np.size(directories, 0)):
    filenamesRvsH[i] = glob.glob(directories[i][0]+r'\*RvsH.csv') #grabs all data in this folder with ****.dat

#Grab all filenames for RvsT
for i in range(np.size(directories, 0)):
    filenamesRvsT[i] = glob.glob(directories[i][0]+r'\*RvsT.csv') #grabs all data in this folder with ****.dat





#%%
    
    ##Datastructure so far###########################################
    #All data should be imported in RvsHdata[i,j][m,n] and RvsTdata[i,j][m,n] #####
    #i = which folder it is from (i.e. what sample is it)
    #j = what file is it from (i.e. for RvsH scans, this will be the temperature.  For temp scans, this will probably either be field cooling or redundant)
    #m and n will be refering the the columns and rows as the files are exported.
    
    
RvsHdata={}
for i in range(np.size(directories, 0)):
    for j in range(np.size(filenamesRvsH[i])):
                   RvsHdata[i,j] = np.genfromtxt(filenamesRvsH[i][j], # Specify filename
                                            delimiter=',', # How is the data delimited?
                                            skip_header=1) # Skip the first 1 rows
RvsTdata={}
for i in range(np.size(directories, 0)):
    for j in range(np.size(filenamesRvsT[i])):
                   RvsTdata[i,j] = np.genfromtxt(filenamesRvsT[i][j], # Specify filename
                                            delimiter=',', # How is the data delimited?
                                            skip_header=1) # Skip the first 1 rows
                                            
                                            
#%%

thickness = 1 #thickness in centimeters
geo = 4.53236 #thickness in centimeters Van der Pauw: pi/ln(2) =4.53236; Hall bar = lengh/Area


fig1, ax1 = plt.subplots()
i = 0;
for filename in filenames:
    
    name = filename[0] + filename[1]
    twotheta, intensity = np.loadtxt(name, delimiter=' ', unpack=True)
    intensity = (intensity + 2) *10**-i
    i = i + 2
    plt.plot(twotheta, intensity, label = 'XRD Scan', linewidth=0.5)
    plt.yscale('log')
    plt.xlabel('2Theta')
    plt.ylabel('Intensity')
    plt.ion()
   

plt.legend(filenames[:, 2], prop={'size':10})
ax1.xaxis.set_major_locator(ticker.MultipleLocator(5.))
ax1.xaxis.set_major_formatter(ticker.FormatStrFormatter('%d'))
ax1.xaxis.set_minor_locator(ticker.MultipleLocator(1))  
ax1.tick_params(direction='in', which='both', right=True, top=True, labelright=False, labeltop=False)
ax1.plot(label = '2theta' )

ax1.yaxis.set_major_locator(ticker.LogLocator(base=10.0, numticks=10))
#ax1.yaxis.set_major_formatter(FormatStrFormatter('%d'))
ax1.yaxis.set_minor_locator(ticker.LogLocator(base=10.0, numticks=10))  
#ax1.tick_params(direction='in', which='both', right=True, top=True, labelright=False, labeltop=False)
plt.xlim(5, 80)
plt.show()



a = 12.994
l = 2 * a * np.sin(twotheta*np.pi/180/2) / (1.5401)
fnl = np.zeros((l.size, 5))

fnl[:, 2] = l
fnl[:, 3] = intensity

plt.savefig(filenames[0][0]+'.png')
plt.savefig(filenames[0][0]+'.svg')
